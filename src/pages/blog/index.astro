---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import SelectableTags from "../../components/SelectableTags.astro";

import readingTime from "reading-time";
import BlogPost from "../../components/BlogPost.astro";

let allPosts = await getCollection("posts").then();
const nonDraftPosts = allPosts.filter((p) => !p.data.draft);

// sort by date
allPosts = nonDraftPosts
  .filter((a) => a.data.pubDate)
  .sort((a, b) => {
    let dateA = new Date(a.data.pubDate),
      dateB = new Date(b.data.pubDate);
    if (dateA < dateB) return 1;
    if (dateA > dateB) return -1;
    return 0;
  });

const tags = [
  ...new Set(
    allPosts
      .map((post) => post.data.tags)
      .flat()
      .map((tag => tag.toLowerCase()))
      .sort()

  ),
];
---

<Layout title="Blog">
  <Header
    title="Blog"
    subtitle="Jared Writes"
    description={"Jared writes about web development, programming, and other things"}
    image="/images/about.webp"
  />

  <h3 class="text-3xl font-bold tracking-tighter mt-12 mb-4sm:text-4xl">
    Filter by tags:
  </h3>
  <div class="mt-4 mb-8">
    <ul class="flex flex-row flex-wrap gap-2">
      {tags.map((t) => <SelectableTags name={t} />)}
    </ul>
  </div>
  <div class="flex flex-col gap-8">
    {
      allPosts.map((p) => (
        <BlogPost
          date={new Date(p.data.pubDate).toLocaleDateString("en-US", {
            month: "long",
            day: "numeric",
            year: "numeric",
          })}
          readTime={readingTime(p.body).text}
          title={p.data.title}
          description={p.data.description}
          tags={p.data.tags}
          url={"/posts/" + p.slug}
        />
      ))
    }
  </div>
</Layout>

<script define:vars={{ tags }}>
  let blogPosts = document.querySelectorAll("div[data-tags]");
  let filters = document.querySelectorAll("input");

  let tagMap = Object.assign(...tags.map((t) => ({ [t]: false })));

  for (const filter of filters) {
    filter.addEventListener("change", (e) => {
      let isChecked = e.target.checked;
      let name = filter.name;
      tagMap[name] = isChecked;

      toggleVisibility();
    });
  }

  function toggleVisibility() {
    let checkedTags = Object.keys(tagMap).filter((t) => tagMap[t] === true);

    for (const blogPost of blogPosts) {
      let tags = blogPost.dataset.tags.split(",");

      if (checkedTags.every((t) => tags.includes(t))) {
        blogPost.style.display = "block";
      } else {
        blogPost.style.display = "none";
      }
    }
  }
</script>
